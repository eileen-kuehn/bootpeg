# bootpeg grammar for emulating Rational math via Integer math
# ############################################################
# The grammar consists of three categories of rules:
# - syntax padding: `spacing`
#   Makes the grammar more friendly to humans,
#   but does not capture any relevant input.
# - head terminals: `number`, `negation`, `group`
#   Rules that start with a literal,
#   ensuring that parsing "advances" through the input.
# - binary operations: `add_sub`, `mul_div`
#   Rules composing several other rules,
#   adding logical structure such as precedence and associativity.
# The first rule always is the entry point for parsing:
# it is applied to the entire input, delegating to other rules to match and structure.

# parsing starts at the first rule
# "!." means "not any" â€“ this only matches the end of the source
top:
    | add_sub spacing !.

# whitespace is explicit in bootpeg
spacing:
    | ' '*

# This is a precedence climbing grammar using left-recursion for left-associative rules
add_sub:
    | lhs=add_sub spacing '+' ~ spacing rhs=mul_div { add(lhs, rhs) }
    | lhs=add_sub spacing '-' ~ spacing rhs=mul_div { sub(lhs, rhs) }
    | mul_div
mul_div:
    | lhs=mul_div spacing '*' ~ spacing rhs=terminal { mul(lhs, rhs) }
    | lhs=mul_div spacing '/' ~ spacing rhs=terminal { div(lhs, rhs) }
    | terminal
terminal:
    | number
    | negation
    | group

number:
    | literal=("1"-"9" "0"-"9"* "." ~ "1"-"9" "0"-"9"*) { decimal(literal) }
    | literal=("1"-"9" "0"-"9"*) { integer(literal) }
negation:
    | "-" ~ spacing expr=top { neg(expr) }
group:
    | '(' ~ spacing exp=top spacing ')'
